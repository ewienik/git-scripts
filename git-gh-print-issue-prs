#!/bin/bash

set -e

REMOTE=${REMOTE:-origin}

issue=$1
[[ $issue =~ ^[0-9]+$ ]] || (echo issue $issue is not an integer ; exit 1)

current_branch=$2
[[ -n $current_branch ]] && [[ -z $(git branch | cut -b 3- | grep ^$current_branch$) ]] && (echo git branch $current_branch does not exist ; exit 1)

commits=$(git log --reverse --grep="^gh-$issue:" --format="%h")
[[ -z $commits ]] && (echo no commits for the issue $issue ; exit 0)

for commit in $commits ; do
    # prepare a subject line without an issue prefix
    subject=$(git log $commit -1 --format="%s" | sed -e "s/^gh-$issue:\\s*\\(.*\\)/\\1/")

    # get a branch assosiated with the commit (it should starts with 'gh-$issue-' prefix)
    branch=$(git branch --points-at $commit | cut -b 3- | grep "^gh-$issue-" | head -1)

    # prepare a pointer for the current branch
    pointer=
    [[ -n $current_branch ]] && [[ $branch = $current_branch ]] && pointer="-> "

    # if there is a remote branch check its commit
    remote_branch=$REMOTE/$branch
    [[ -n $(git branch -a | cut -b 3- | grep ^remotes/$remote_branch$) ]] && commit=$(git log $remote_branch -1 --format="%h")

    # find the PR corresponding to the specific commit
    pr=
    prs=
    [[ -z $pointer ]] && prs=$(gh pr list -S $commit -s all | cut -f 1)
    for pr in $prs; do
        check=$(gh pr view $pr --json commits | jq -r '.commits[-1].oid' | cut -c1-7)
        [[ $check = $commit ]] && break
    done

    # if there is a PR won't use subject
    [[ -n $pr ]] && pr="#$pr" && subject=""

    echo "- $pointer$pr$subject"
done
